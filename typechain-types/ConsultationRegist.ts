/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export interface ConsultationRegistInterface extends utils.Interface {
  functions: {
    "getRegist(uint256)": FunctionFragment;
    "regists(uint256)": FunctionFragment;
    "setRegist(string,string,string,string,string,string,string,address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic: "getRegist" | "regists" | "setRegist"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "getRegist",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "regists",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setRegist",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;

  decodeFunctionResult(functionFragment: "getRegist", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "regists", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setRegist", data: BytesLike): Result;

  events: {};
}

export interface ConsultationRegist extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ConsultationRegistInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    getRegist(
      _index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [string, string, string, string, string, string, string, string] & {
        _name: string;
        _phone: string;
        _doctorName: string;
        _session: string;
        _date: string;
        _gender: string;
        _symptom: string;
        _wallet: string;
      }
    >;

    regists(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [string, string, string, string, string, string, string, string] & {
        name: string;
        phone: string;
        doctorName: string;
        session: string;
        date: string;
        symptom: string;
        wallet: string;
        gender: string;
      }
    >;

    setRegist(
      _name: PromiseOrValue<string>,
      _phone: PromiseOrValue<string>,
      _doctorName: PromiseOrValue<string>,
      _session: PromiseOrValue<string>,
      _date: PromiseOrValue<string>,
      _gender: PromiseOrValue<string>,
      _symptom: PromiseOrValue<string>,
      _wallet: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  getRegist(
    _index: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [string, string, string, string, string, string, string, string] & {
      _name: string;
      _phone: string;
      _doctorName: string;
      _session: string;
      _date: string;
      _gender: string;
      _symptom: string;
      _wallet: string;
    }
  >;

  regists(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [string, string, string, string, string, string, string, string] & {
      name: string;
      phone: string;
      doctorName: string;
      session: string;
      date: string;
      symptom: string;
      wallet: string;
      gender: string;
    }
  >;

  setRegist(
    _name: PromiseOrValue<string>,
    _phone: PromiseOrValue<string>,
    _doctorName: PromiseOrValue<string>,
    _session: PromiseOrValue<string>,
    _date: PromiseOrValue<string>,
    _gender: PromiseOrValue<string>,
    _symptom: PromiseOrValue<string>,
    _wallet: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    getRegist(
      _index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [string, string, string, string, string, string, string, string] & {
        _name: string;
        _phone: string;
        _doctorName: string;
        _session: string;
        _date: string;
        _gender: string;
        _symptom: string;
        _wallet: string;
      }
    >;

    regists(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [string, string, string, string, string, string, string, string] & {
        name: string;
        phone: string;
        doctorName: string;
        session: string;
        date: string;
        symptom: string;
        wallet: string;
        gender: string;
      }
    >;

    setRegist(
      _name: PromiseOrValue<string>,
      _phone: PromiseOrValue<string>,
      _doctorName: PromiseOrValue<string>,
      _session: PromiseOrValue<string>,
      _date: PromiseOrValue<string>,
      _gender: PromiseOrValue<string>,
      _symptom: PromiseOrValue<string>,
      _wallet: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    getRegist(
      _index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    regists(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setRegist(
      _name: PromiseOrValue<string>,
      _phone: PromiseOrValue<string>,
      _doctorName: PromiseOrValue<string>,
      _session: PromiseOrValue<string>,
      _date: PromiseOrValue<string>,
      _gender: PromiseOrValue<string>,
      _symptom: PromiseOrValue<string>,
      _wallet: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    getRegist(
      _index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    regists(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setRegist(
      _name: PromiseOrValue<string>,
      _phone: PromiseOrValue<string>,
      _doctorName: PromiseOrValue<string>,
      _session: PromiseOrValue<string>,
      _date: PromiseOrValue<string>,
      _gender: PromiseOrValue<string>,
      _symptom: PromiseOrValue<string>,
      _wallet: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
