/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export declare namespace UserData {
  export type UserStruct = {
    nama: PromiseOrValue<string>;
    email: PromiseOrValue<string>;
    telepon: PromiseOrValue<string>;
    gender: PromiseOrValue<string>;
    tanggalLahir: PromiseOrValue<string>;
    wallet: PromiseOrValue<string>;
    status: PromiseOrValue<boolean>;
  };

  export type UserStructOutput = [
    string,
    string,
    string,
    string,
    string,
    string,
    boolean
  ] & {
    nama: string;
    email: string;
    telepon: string;
    gender: string;
    tanggalLahir: string;
    wallet: string;
    status: boolean;
  };
}

export interface UserDataInterface extends utils.Interface {
  functions: {
    "addUser(string,string,string,string,string,bool)": FunctionFragment;
    "addUserAdmin(address,string,string,string,string,string,bool)": FunctionFragment;
    "getUser(address)": FunctionFragment;
    "getUserAdmin()": FunctionFragment;
    "roles()": FunctionFragment;
    "updateUser(string,string,string,string,string,bool)": FunctionFragment;
    "updateUserAdmin(address,string,string,string,string,string,bool)": FunctionFragment;
    "users(uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "addUser"
      | "addUserAdmin"
      | "getUser"
      | "getUserAdmin"
      | "roles"
      | "updateUser"
      | "updateUserAdmin"
      | "users"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "addUser",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<boolean>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "addUserAdmin",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<boolean>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getUser",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserAdmin",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "roles", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "updateUser",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<boolean>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "updateUserAdmin",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<boolean>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "users",
    values: [PromiseOrValue<BigNumberish>]
  ): string;

  decodeFunctionResult(functionFragment: "addUser", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "addUserAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getUser", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getUserAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "roles", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "updateUser", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updateUserAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "users", data: BytesLike): Result;

  events: {
    "UserAdded(string,string,string,string,string,address,bool)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "UserAdded"): EventFragment;
}

export interface UserAddedEventObject {
  nama: string;
  email: string;
  telepon: string;
  gender: string;
  tanggalLahir: string;
  wallet: string;
  status: boolean;
}
export type UserAddedEvent = TypedEvent<
  [string, string, string, string, string, string, boolean],
  UserAddedEventObject
>;

export type UserAddedEventFilter = TypedEventFilter<UserAddedEvent>;

export interface UserData extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: UserDataInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    addUser(
      _nama: PromiseOrValue<string>,
      _email: PromiseOrValue<string>,
      _telepon: PromiseOrValue<string>,
      _gender: PromiseOrValue<string>,
      _tanggalLahir: PromiseOrValue<string>,
      _status: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    addUserAdmin(
      _wallet: PromiseOrValue<string>,
      _nama: PromiseOrValue<string>,
      _email: PromiseOrValue<string>,
      _telepon: PromiseOrValue<string>,
      _gender: PromiseOrValue<string>,
      _tanggalLahir: PromiseOrValue<string>,
      _status: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getUser(
      _wallet: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string, string, string, string, string, boolean]>;

    getUserAdmin(
      overrides?: CallOverrides
    ): Promise<[UserData.UserStructOutput[]]>;

    roles(overrides?: CallOverrides): Promise<[string]>;

    updateUser(
      _nama: PromiseOrValue<string>,
      _email: PromiseOrValue<string>,
      _telepon: PromiseOrValue<string>,
      _gender: PromiseOrValue<string>,
      _tanggalLahir: PromiseOrValue<string>,
      _status: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateUserAdmin(
      _wallet: PromiseOrValue<string>,
      _nama: PromiseOrValue<string>,
      _email: PromiseOrValue<string>,
      _telepon: PromiseOrValue<string>,
      _gender: PromiseOrValue<string>,
      _tanggalLahir: PromiseOrValue<string>,
      _status: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    users(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [string, string, string, string, string, string, boolean] & {
        nama: string;
        email: string;
        telepon: string;
        gender: string;
        tanggalLahir: string;
        wallet: string;
        status: boolean;
      }
    >;
  };

  addUser(
    _nama: PromiseOrValue<string>,
    _email: PromiseOrValue<string>,
    _telepon: PromiseOrValue<string>,
    _gender: PromiseOrValue<string>,
    _tanggalLahir: PromiseOrValue<string>,
    _status: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  addUserAdmin(
    _wallet: PromiseOrValue<string>,
    _nama: PromiseOrValue<string>,
    _email: PromiseOrValue<string>,
    _telepon: PromiseOrValue<string>,
    _gender: PromiseOrValue<string>,
    _tanggalLahir: PromiseOrValue<string>,
    _status: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getUser(
    _wallet: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<[string, string, string, string, string, boolean]>;

  getUserAdmin(overrides?: CallOverrides): Promise<UserData.UserStructOutput[]>;

  roles(overrides?: CallOverrides): Promise<string>;

  updateUser(
    _nama: PromiseOrValue<string>,
    _email: PromiseOrValue<string>,
    _telepon: PromiseOrValue<string>,
    _gender: PromiseOrValue<string>,
    _tanggalLahir: PromiseOrValue<string>,
    _status: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateUserAdmin(
    _wallet: PromiseOrValue<string>,
    _nama: PromiseOrValue<string>,
    _email: PromiseOrValue<string>,
    _telepon: PromiseOrValue<string>,
    _gender: PromiseOrValue<string>,
    _tanggalLahir: PromiseOrValue<string>,
    _status: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  users(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [string, string, string, string, string, string, boolean] & {
      nama: string;
      email: string;
      telepon: string;
      gender: string;
      tanggalLahir: string;
      wallet: string;
      status: boolean;
    }
  >;

  callStatic: {
    addUser(
      _nama: PromiseOrValue<string>,
      _email: PromiseOrValue<string>,
      _telepon: PromiseOrValue<string>,
      _gender: PromiseOrValue<string>,
      _tanggalLahir: PromiseOrValue<string>,
      _status: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    addUserAdmin(
      _wallet: PromiseOrValue<string>,
      _nama: PromiseOrValue<string>,
      _email: PromiseOrValue<string>,
      _telepon: PromiseOrValue<string>,
      _gender: PromiseOrValue<string>,
      _tanggalLahir: PromiseOrValue<string>,
      _status: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    getUser(
      _wallet: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string, string, string, string, string, boolean]>;

    getUserAdmin(
      overrides?: CallOverrides
    ): Promise<UserData.UserStructOutput[]>;

    roles(overrides?: CallOverrides): Promise<string>;

    updateUser(
      _nama: PromiseOrValue<string>,
      _email: PromiseOrValue<string>,
      _telepon: PromiseOrValue<string>,
      _gender: PromiseOrValue<string>,
      _tanggalLahir: PromiseOrValue<string>,
      _status: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    updateUserAdmin(
      _wallet: PromiseOrValue<string>,
      _nama: PromiseOrValue<string>,
      _email: PromiseOrValue<string>,
      _telepon: PromiseOrValue<string>,
      _gender: PromiseOrValue<string>,
      _tanggalLahir: PromiseOrValue<string>,
      _status: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    users(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [string, string, string, string, string, string, boolean] & {
        nama: string;
        email: string;
        telepon: string;
        gender: string;
        tanggalLahir: string;
        wallet: string;
        status: boolean;
      }
    >;
  };

  filters: {
    "UserAdded(string,string,string,string,string,address,bool)"(
      nama?: null,
      email?: null,
      telepon?: null,
      gender?: null,
      tanggalLahir?: null,
      wallet?: null,
      status?: null
    ): UserAddedEventFilter;
    UserAdded(
      nama?: null,
      email?: null,
      telepon?: null,
      gender?: null,
      tanggalLahir?: null,
      wallet?: null,
      status?: null
    ): UserAddedEventFilter;
  };

  estimateGas: {
    addUser(
      _nama: PromiseOrValue<string>,
      _email: PromiseOrValue<string>,
      _telepon: PromiseOrValue<string>,
      _gender: PromiseOrValue<string>,
      _tanggalLahir: PromiseOrValue<string>,
      _status: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    addUserAdmin(
      _wallet: PromiseOrValue<string>,
      _nama: PromiseOrValue<string>,
      _email: PromiseOrValue<string>,
      _telepon: PromiseOrValue<string>,
      _gender: PromiseOrValue<string>,
      _tanggalLahir: PromiseOrValue<string>,
      _status: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getUser(
      _wallet: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUserAdmin(overrides?: CallOverrides): Promise<BigNumber>;

    roles(overrides?: CallOverrides): Promise<BigNumber>;

    updateUser(
      _nama: PromiseOrValue<string>,
      _email: PromiseOrValue<string>,
      _telepon: PromiseOrValue<string>,
      _gender: PromiseOrValue<string>,
      _tanggalLahir: PromiseOrValue<string>,
      _status: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateUserAdmin(
      _wallet: PromiseOrValue<string>,
      _nama: PromiseOrValue<string>,
      _email: PromiseOrValue<string>,
      _telepon: PromiseOrValue<string>,
      _gender: PromiseOrValue<string>,
      _tanggalLahir: PromiseOrValue<string>,
      _status: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    users(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addUser(
      _nama: PromiseOrValue<string>,
      _email: PromiseOrValue<string>,
      _telepon: PromiseOrValue<string>,
      _gender: PromiseOrValue<string>,
      _tanggalLahir: PromiseOrValue<string>,
      _status: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    addUserAdmin(
      _wallet: PromiseOrValue<string>,
      _nama: PromiseOrValue<string>,
      _email: PromiseOrValue<string>,
      _telepon: PromiseOrValue<string>,
      _gender: PromiseOrValue<string>,
      _tanggalLahir: PromiseOrValue<string>,
      _status: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getUser(
      _wallet: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getUserAdmin(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    roles(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    updateUser(
      _nama: PromiseOrValue<string>,
      _email: PromiseOrValue<string>,
      _telepon: PromiseOrValue<string>,
      _gender: PromiseOrValue<string>,
      _tanggalLahir: PromiseOrValue<string>,
      _status: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateUserAdmin(
      _wallet: PromiseOrValue<string>,
      _nama: PromiseOrValue<string>,
      _email: PromiseOrValue<string>,
      _telepon: PromiseOrValue<string>,
      _gender: PromiseOrValue<string>,
      _tanggalLahir: PromiseOrValue<string>,
      _status: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    users(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
