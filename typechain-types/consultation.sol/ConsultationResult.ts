/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export declare namespace ConsultationResult {
  export type DataStruct = {
    nama: PromiseOrValue<string>;
    namaDokter: PromiseOrValue<string>;
    tanggal: PromiseOrValue<string>;
    keluhan: PromiseOrValue<string>;
    diagnosa: PromiseOrValue<string>;
    tensi: PromiseOrValue<string>;
    gula: PromiseOrValue<string>;
    wallet: PromiseOrValue<string>;
  };

  export type DataStructOutput = [
    string,
    string,
    string,
    string,
    string,
    string,
    string,
    string
  ] & {
    nama: string;
    namaDokter: string;
    tanggal: string;
    keluhan: string;
    diagnosa: string;
    tensi: string;
    gula: string;
    wallet: string;
  };
}

export interface ConsultationResultInterface extends utils.Interface {
  functions: {
    "accountsWithConsultations(uint256)": FunctionFragment;
    "addConsultation(address,string,string,string,string,string,string,string)": FunctionFragment;
    "consultationCount()": FunctionFragment;
    "consultations(address,uint256)": FunctionFragment;
    "getAllConsultations()": FunctionFragment;
    "getConsultationsPasien()": FunctionFragment;
    "roles()": FunctionFragment;
    "updateConsultation(address,uint256,string,string,string,string,string,string,string)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "accountsWithConsultations"
      | "addConsultation"
      | "consultationCount"
      | "consultations"
      | "getAllConsultations"
      | "getConsultationsPasien"
      | "roles"
      | "updateConsultation"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "accountsWithConsultations",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "addConsultation",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "consultationCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "consultations",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getAllConsultations",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getConsultationsPasien",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "roles", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "updateConsultation",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "accountsWithConsultations",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addConsultation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "consultationCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "consultations",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAllConsultations",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getConsultationsPasien",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "roles", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updateConsultation",
    data: BytesLike
  ): Result;

  events: {};
}

export interface ConsultationResult extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ConsultationResultInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    accountsWithConsultations(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    addConsultation(
      _wallet: PromiseOrValue<string>,
      _nama: PromiseOrValue<string>,
      _namaDokter: PromiseOrValue<string>,
      _tanggal: PromiseOrValue<string>,
      _keluhan: PromiseOrValue<string>,
      _diagnosa: PromiseOrValue<string>,
      _tensi: PromiseOrValue<string>,
      _gula: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    consultationCount(overrides?: CallOverrides): Promise<[BigNumber]>;

    consultations(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [string, string, string, string, string, string, string, string] & {
        nama: string;
        namaDokter: string;
        tanggal: string;
        keluhan: string;
        diagnosa: string;
        tensi: string;
        gula: string;
        wallet: string;
      }
    >;

    getAllConsultations(
      overrides?: CallOverrides
    ): Promise<[ConsultationResult.DataStructOutput[][]]>;

    getConsultationsPasien(
      overrides?: CallOverrides
    ): Promise<[ConsultationResult.DataStructOutput[]]>;

    roles(overrides?: CallOverrides): Promise<[string]>;

    updateConsultation(
      _wallet: PromiseOrValue<string>,
      _index: PromiseOrValue<BigNumberish>,
      _nama: PromiseOrValue<string>,
      _namaDokter: PromiseOrValue<string>,
      _tanggal: PromiseOrValue<string>,
      _keluhan: PromiseOrValue<string>,
      _diagnosa: PromiseOrValue<string>,
      _tensi: PromiseOrValue<string>,
      _gula: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  accountsWithConsultations(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  addConsultation(
    _wallet: PromiseOrValue<string>,
    _nama: PromiseOrValue<string>,
    _namaDokter: PromiseOrValue<string>,
    _tanggal: PromiseOrValue<string>,
    _keluhan: PromiseOrValue<string>,
    _diagnosa: PromiseOrValue<string>,
    _tensi: PromiseOrValue<string>,
    _gula: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  consultationCount(overrides?: CallOverrides): Promise<BigNumber>;

  consultations(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [string, string, string, string, string, string, string, string] & {
      nama: string;
      namaDokter: string;
      tanggal: string;
      keluhan: string;
      diagnosa: string;
      tensi: string;
      gula: string;
      wallet: string;
    }
  >;

  getAllConsultations(
    overrides?: CallOverrides
  ): Promise<ConsultationResult.DataStructOutput[][]>;

  getConsultationsPasien(
    overrides?: CallOverrides
  ): Promise<ConsultationResult.DataStructOutput[]>;

  roles(overrides?: CallOverrides): Promise<string>;

  updateConsultation(
    _wallet: PromiseOrValue<string>,
    _index: PromiseOrValue<BigNumberish>,
    _nama: PromiseOrValue<string>,
    _namaDokter: PromiseOrValue<string>,
    _tanggal: PromiseOrValue<string>,
    _keluhan: PromiseOrValue<string>,
    _diagnosa: PromiseOrValue<string>,
    _tensi: PromiseOrValue<string>,
    _gula: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    accountsWithConsultations(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    addConsultation(
      _wallet: PromiseOrValue<string>,
      _nama: PromiseOrValue<string>,
      _namaDokter: PromiseOrValue<string>,
      _tanggal: PromiseOrValue<string>,
      _keluhan: PromiseOrValue<string>,
      _diagnosa: PromiseOrValue<string>,
      _tensi: PromiseOrValue<string>,
      _gula: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    consultationCount(overrides?: CallOverrides): Promise<BigNumber>;

    consultations(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [string, string, string, string, string, string, string, string] & {
        nama: string;
        namaDokter: string;
        tanggal: string;
        keluhan: string;
        diagnosa: string;
        tensi: string;
        gula: string;
        wallet: string;
      }
    >;

    getAllConsultations(
      overrides?: CallOverrides
    ): Promise<ConsultationResult.DataStructOutput[][]>;

    getConsultationsPasien(
      overrides?: CallOverrides
    ): Promise<ConsultationResult.DataStructOutput[]>;

    roles(overrides?: CallOverrides): Promise<string>;

    updateConsultation(
      _wallet: PromiseOrValue<string>,
      _index: PromiseOrValue<BigNumberish>,
      _nama: PromiseOrValue<string>,
      _namaDokter: PromiseOrValue<string>,
      _tanggal: PromiseOrValue<string>,
      _keluhan: PromiseOrValue<string>,
      _diagnosa: PromiseOrValue<string>,
      _tensi: PromiseOrValue<string>,
      _gula: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    accountsWithConsultations(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    addConsultation(
      _wallet: PromiseOrValue<string>,
      _nama: PromiseOrValue<string>,
      _namaDokter: PromiseOrValue<string>,
      _tanggal: PromiseOrValue<string>,
      _keluhan: PromiseOrValue<string>,
      _diagnosa: PromiseOrValue<string>,
      _tensi: PromiseOrValue<string>,
      _gula: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    consultationCount(overrides?: CallOverrides): Promise<BigNumber>;

    consultations(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAllConsultations(overrides?: CallOverrides): Promise<BigNumber>;

    getConsultationsPasien(overrides?: CallOverrides): Promise<BigNumber>;

    roles(overrides?: CallOverrides): Promise<BigNumber>;

    updateConsultation(
      _wallet: PromiseOrValue<string>,
      _index: PromiseOrValue<BigNumberish>,
      _nama: PromiseOrValue<string>,
      _namaDokter: PromiseOrValue<string>,
      _tanggal: PromiseOrValue<string>,
      _keluhan: PromiseOrValue<string>,
      _diagnosa: PromiseOrValue<string>,
      _tensi: PromiseOrValue<string>,
      _gula: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    accountsWithConsultations(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    addConsultation(
      _wallet: PromiseOrValue<string>,
      _nama: PromiseOrValue<string>,
      _namaDokter: PromiseOrValue<string>,
      _tanggal: PromiseOrValue<string>,
      _keluhan: PromiseOrValue<string>,
      _diagnosa: PromiseOrValue<string>,
      _tensi: PromiseOrValue<string>,
      _gula: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    consultationCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    consultations(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAllConsultations(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getConsultationsPasien(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    roles(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    updateConsultation(
      _wallet: PromiseOrValue<string>,
      _index: PromiseOrValue<BigNumberish>,
      _nama: PromiseOrValue<string>,
      _namaDokter: PromiseOrValue<string>,
      _tanggal: PromiseOrValue<string>,
      _keluhan: PromiseOrValue<string>,
      _diagnosa: PromiseOrValue<string>,
      _tensi: PromiseOrValue<string>,
      _gula: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
